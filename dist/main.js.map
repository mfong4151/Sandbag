{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///./src/scripts/phy_object.js","webpack:///./src/scripts/player.js","webpack:///./src/scripts/caelum.js","webpack:///./src/scripts/sandbag.js","webpack:///./src/scripts/background.js","webpack:///./src/scripts/counter.js","webpack:///./src/scripts/timer.js","webpack:///./src/scripts/offscreen.js","webpack:///./src/index.js","webpack:///./src/scripts/game.js"],"sourcesContent":["//refers to any body that must obey the laws of game physics\n\nimport Player from \"./player\";\n\nconst CONSTANTS = {\n    BOUNCE_OFFSET: 10,\n\n}\n\n\nexport default class PhysicsObject{\n\n    constructor(dimensions, options){\n        //Super overridden variables\n        this.height = options.height;\n        this.width = options.width;\n        this.mass = options.mass;\n        this.direction = {horizontal:options.directionHorizontal,\n                            vertical: options.directionVertical\n                        }\n        //this.animations = options.animations\n        this.pos = {\n            x: options.defaultPosition.x, \n            y: options.defaultPosition.y,\n            x2: options.defaultPosition.x + options.width,\n            y2: options.defaultPosition.y + options.height,\n            defaultY: options.defaultPosition.y,\n            prev:{\n                x:options.defaultPosition.x,\n                y:options.defaultPosition.y\n            }\n        }\n\n       \n        this.bounceOffset = options.bounceOffset;\n\n        //if character is idle, attack, in jump, etc.\n        this.state = 0;\n        //We should reevaluate if we need an \"in jump\"\n        this.drag = .3\n        this.vel ={x: 0, y: 20};\n        this.accel= { x:0, y:0 };\n\n        this.boundaries = this.setBoundaries(dimensions);\n    }\n\n    setBoundaries(dimensions){\n        let leftBound, rightBound, floorBound, ceilingBound;\n        leftBound = 0;\n        ceilingBound = 0;\n        rightBound = dimensions.width - this.width - CONSTANTS.BOUNCE_OFFSET;\n        floorBound = dimensions.floorPlane - this.height + CONSTANTS.BOUNCE_OFFSET;\n        \n        return{leftBound,rightBound, floorBound, ceilingBound}\n\n    }\n\n\n\n    //change countdownOver after we get countdown running\n    outOfBounds(countdownOver = false){\n        if(this.pos.x <= this.boundaries.leftBound \n            || this.pos.x >= this.boundaries.rightBound){\n            //|| this.pos.y <= this.boundaries.ceilingBound){\n            \n                return true;\n            }\n        return false;\n    }  \n\n    //Used to \"bounce\" the physical object if it gets out of bounds\n\n    bounce(){\n        \n        \n        if(this.pos.x <= this.boundaries.leftBound ){\n            this.pos.x = 3;\n            this.pos.x2 = 3 + this.width\n            this.direction.horizontal *= -1;\n        }\n        \n        if(this.pos.x + this.width >= this.boundaries.rightBound){\n            this.pos.x = this.boundaries.rightBound - 10;\n            this.direction.horizontal *= -1;\n\n        }\n        \n        if(this.pos.y <= this.boundaries.ceilingBound ){ \n            this.pos.y = 3 \n            this.vel.y *= -1\n            //this.direction.vertical *= -1;\n        }\n\n        //if(this.pos.y >= this.boundaries.floorBound){\n\n        //    this.pos.y = this.boundaries.floorBound - this.height;\n        //}\n    }\n \n\n\n\n    moveVertical(){\n        \n        this.pos.y += this.vel.y;\n        this.pos.y2 += this.vel.y\n        \n        if(this.pos.y + this.vel.y <= this.boundaries.floorBound){\n            this.vel.y += this.gravity;\n        }\n\n        else{\n            this.vel.y = 0;\n            if (this instanceof Player){\n                this.setStateIdle()\n            }\n        }\n    }\n\n    animate(ctx){\n        this.update()\n        this.draw(ctx);\n    }\n\n    //Get files from folder to import\n   \n\n\n\n}\n\n\n","import PhysicsObject from \"./phy_object\";\n\n\nconst CONSTANTS = {\n    WIDTH: 91,\n    HEIGHT: 90,\n    MASS: 40,\n    BOUNCE_OFFSET: 3,\n    DEFAULT_DIRECTION:{\n                        HORIZONTAL: 1,\n                        VERTICAL: -1\n                        },  //refers to the direction we're facing, 1 = right, -1 = left\n    DEFAULT_POSITION: { x:4,\n                        y:0,\n                        },\n    TEST_COLOR :'blue',\n    DEFAULT_ACCEL: 0,\n    DEFAULT_VEL: 0,\n    DEFAULT_HP: 0,\n\n    STATE: {  \n        IDLE: 0,\n        WALK: 1,\n        JUMP: 2,\n        ATTACK: 3,\n        CHARGE_ATTACK: 4\n    },\n\n    LIGHT_ATTACK:{\n        DAMAGE: .2,\n        VELOCITY_INPUT:{\n            X:15,\n            Y:30,\n        }\n        \n    }\n\n    \n\n};\n\nexport default class Player extends PhysicsObject{\n    constructor(dimensions){\n        super(dimensions,\n            {\n                height: CONSTANTS.HEIGHT,\n                width: CONSTANTS.WIDTH,\n                mass: CONSTANTS.MASS,\n                directionHorizontal: CONSTANTS.DEFAULT_DIRECTION.HORIZONTAL,\n                directionVertical: CONSTANTS.DEFAULT_DIRECTION.VERTICAL,\n                defaultPosition:{x: dimensions.width/4,\n                                y: 100,\n                                }\n            });\n\n        this.gravity = .5;\n        this.activeFrameSet;\n        this.frame = 0;\n        this.gameFrame = 0;\n        this.lightAttack = {\n                            attacking: false,\n                            damage: CONSTANTS.LIGHT_ATTACK.DAMAGE,\n\n                            velocityInput:{\n                                    x: CONSTANTS.LIGHT_ATTACK.VELOCITY_INPUT.X, \n                                    y: CONSTANTS.LIGHT_ATTACK.VELOCITY_INPUT.Y \n                                    },\n\n                            animation:{\n                                width: 224,\n                                height: 148\n                            },\n                            areaOfEffect:{\n                                    left: this.pos.x - 40,\n                                    right: this.pos.x + 182,\n                                    up: this.pos.y -30,\n                                    down: this.pos.y2 +120\n                                }\n                            },\n\n        this.chargeAttack = {\n                                attacking: false,\n                                damage: 5,\n                                velocityInput: 200,\n                                animation:{\n                                    width: 224,\n                                    height: 148\n                            }\n        }\n    }\n\n    //can be dried up\n    frameChoice(){\n        if (this.state === CONSTANTS.STATE.IDLE){\n             if (this.direction.horizontal === -1) this.activeFrameSet = this.animations.idleLeft;\n             else if (this.direction.horizontal === 1) this.activeFrameSet = this.animations.idleRight;\n\n        }else if (this.state === CONSTANTS.STATE.WALK){\n            if (this.direction.horizontal === -1) this.activeFrameSet = this.animations.walkLeft;\n            else if (this.direction.horizontal === 1) this.activeFrameSet = this.animations.walkRight;\n\n        }else if (this.state === CONSTANTS.STATE.JUMP){\n            if (this.direction.horizontal === -1) this.activeFrameSet = this.animations.jumpLeft;\n            else if (this.direction.horizontal === 1) this.activeFrameSet = this.animations.jumpRight;\n        }\n        else if (this.state === CONSTANTS.STATE.ATTACK){\n            if (this.direction.horizontal === -1) this.activeFrameSet = this.animations.attackLeft;\n            else if (this.direction.horizontal === 1) this.activeFrameSet = this.animations.attackRight;\n        }\n\n    }\n\n    frameSetAnimation(){\n        if (this.state === CONSTANTS.STATE.ATTACK || this.state === CONSTANTS.STATE.CHARGE_ATTACK){\n            if (this.gameFrame % 10 === 0){\n              if (this.frame < 4) this.frame++;\n              else this.frame = 0;\n            }\n              this.gameFrame ++ \n  \n          }else if(this.state === CONSTANTS.STATE.IDLE){\n            if (this.gameFrame === 0){\n                if (this.frame < 15) this.frame++;\n                else this.frame = 0;\n            }\n            this.gameFrame ++;\n  \n          }else if (this.state === CONSTANTS.STATE.WALK){\n              if (this.gameFrame % 11 === 0){\n                if (this.frame < 4) this.frame++;\n                else this.frame = 0;\n              }\n              this.gameFrame ++;\n  \n          }else if (this.state === CONSTANTS.STATE.JUMP){\n              if (this.gameFrame % 2 === 0){\n                  if (this.frame < 1) this.frame++;\n                  else this.frame = 0;\n                }\n                this.gameFrame ++\n        }else if (this.state === CONSTANTS.STATE.ATTACK){\n               if (this.gameFrame % 2 === 0){\n                  if (this.frame < 1) this.frame++;\n                  else this.frame = 0;\n                }\n            }\n        }\n    \n\n    _drawAttackFrames(ctx){\n        ctx.drawImage(\n            this.activeFrameSet,\n             this.frame * this.lightAttack.animation.width,\n             0,\n             this.lightAttack.animation.width,\n             this.lightAttack.animation.height,\n            this.pos.x -55,\n            this.pos.y -30,\n            this.lightAttack.animation.width,\n            this.lightAttack.animation.height\n        \n        )}\n\n    draw(ctx){\n\n        this.frameChoice();\n    \n        if(this.state === CONSTANTS.STATE.ATTACK) this._drawAttackFrames(ctx);\n        else{\n        ctx.drawImage(\n            this.activeFrameSet,\n             this.frame * this.width,\n             0,\n             this.width,\n             this.height,\n            this.pos.x,\n            this.pos.y,\n            this.width,\n            this.height\n            )\n        }\n        this.frameSetAnimation();\n    }\n    \n    \n    increaseVelX(){\n        if (this.vel.x < 12) this.vel.x = 12\n        else if (this.vel.x >= 14 && this.vel.x < 40) this.vel.x += .5\n        \n    }\n    \n    changeAnimationState(){\n        if(this.lightAttack.attacking) this.state = CONSTANTS.STATE.ATTACK;\n        else if (this.vel.y < 0) this.state = CONSTANTS.STATE.JUMP;\n        else if (this.vel.x === 0 && this.vel.y === 0) this.state = CONSTANTS.STATE.IDLE;\n        else if (this.vel.y === 0 && this.vel.x > 0) this.state = CONSTANTS.STATE.WALK;\n        \n    }\n    \n    setStateIdle(){\n            this.state = CONSTANTS.STATE.IDLE;\n    }\n    \n    jump(){\n\n        this.vel.y -= 15;\n    }\n\n    \n    doLightAttack(){\n        if(!this.lightAttack.attacking)  this.lightAttack.attacking = true;\n    }\n\n    updateLightAttackAOE(){\n        if (this.direction === 1){\n            this.lightAttack.areaOfEffect.left = this.pos.x - 40;\n            this.lightAttack.areaOfEffect.right = this.pos.x + 182;\n        }\n        else{\n            this.lightAttack.areaOfEffect.left = this.pos.x2 - 182;\n            this.lightAttack.areaOfEffect.right = this.pos.x + 40;\n        }\n        this.lightAttack.areaOfEffect.up = this.pos.y -30;\n        this.lightAttack.areaOfEffect.down = this.pos.y2 +120;\n    }\n\n    \n    preformLightAttack(){\n        if (this.lightAttack.attacking){\n            this.updateLightAttackAOE();\n            this.attackFrames;\n            this.state = CONSTANTS.STATE.ATTACK;\n          \n            setTimeout(()=>{\n                this.state = CONSTANTS.STATE.IDLE;\n                this.lightAttack.attacking = false;\n                this.frame = 0\n            }, 500)\n\n            return true;\n        }\n        return false;\n    }\n\n    update(){\n    \n        this.moveVertical();\n        this.moveHorizontal();\n        this.preformLightAttack()\n        \n        this.changeAnimationState();\n    }\n    \n    endHorizontalMovement(){\n        this.vel.x = 0\n    }\n    moveHorizontal(){\n        this.pos.x2 += this.vel.x * this.direction.horizontal;\n        this.pos.x += this.vel.x * this.direction.horizontal;\n    }\n\n\n    doChargeAttack(){\n        this.state = CONSTANTS.STATE.CHARGE_ATTACK;\n        \n    }\n    releaseChargeAttack(){\n\n    }\n\n    move(wasd){\n        switch (wasd){\n\n            case 'w':\n                if (this.state !== CONSTANTS.STATE.JUMP)\n                this.jump();\n\n                break\n            case 'a':\n                this.direction.horizontal = -1;\n                this.increaseVelX();\n                break\n\n            case 'd':\n                this.direction.horizontal = 1;\n                this.increaseVelX()\n\n                break\n\n            case 's':\n                this.direction.vertical = -1\n                break\n        }\n    }\n\n    reset(dimensions){\n        this.pos= {x: dimensions.width/4,\n                                    y: 0\n                                    },\n        this.vel = {\n                    x: 0,\n                    y: 0\n                    }\n    }\n\n}\n\n//character classes\n//When constructing a character, we should super over options\nclass TestChar extends Player{\n    \n    draw(ctx){\n        //Gut these out for more shape sensitive items later\n        ctx.fillStyle = this.testColor;\n        ctx.fillRect(\n            this.pos.x,\n            this.pos.y,\n            this.width,\n            this.height\n          )\n    }\n}\n\n\nexport {TestChar}; ","import Player from \"./player\"\n\nexport default class Caelum extends Player{\n    constructor(dimensions){\n        super(dimensions)\n        this.animations = this.importSpriteSheets(); \n        \n    }\n\n    importSpriteSheets(){\n\n        let idleLeft = new Image(), idleRight = new Image();\n        let walkLeft = new Image(), walkRight = new Image();\n        let jumpLeft = new Image(), jumpRight = new Image();\n        let attackLeft = new Image(), attackRight = new Image();\n\n        const allAnimations = [idleLeft, idleRight, walkLeft, walkRight, jumpLeft, jumpRight, attackLeft, attackRight]\n        const allPaths =[\n            './assets/image/character/caelum/idle_left.png',\n            './assets/image/character/caelum/idle_right.png',\n            './assets/image/character/caelum/walk_left.png',\n            './assets/image/character/caelum/walk_right.png',\n            './assets/image/character/caelum/jump_left.png',\n            './assets/image/character/caelum/jump_right.png',\n            './assets/image/character/caelum/attack_left.png',\n            './assets/image/character/caelum/attack_right.png'\n\n        ];\n\n        \n        for(let i = 0; i < allPaths.length; i++){\n            allAnimations[i].src = allPaths[i]\n        }\n        return {idleLeft, idleRight, walkLeft, walkRight, jumpLeft, jumpRight, attackLeft, attackRight}\n    }\n\n\n}\n","import PhysicsObject from \"./phy_object\";\n\n\nconst CONSTANTS = {\n    HEIGHT: 150,\n    WIDTH: 130,\n    MASS: 80,\n    DEFAULT_DIRECTION:{\n        HORIZONTAL: -1,\n        VERTICAL: -1\n    },  //refers to the direction we're facing, 1 = right, -1 = left\n    DEFAULT_POS: {\n                X: 2,\n                Y:0\n                },\n    DEFAULT_VEL: 0,\n    DEFAULT_HP: 1,\n    GRAVITY: 4.8,\n\n    STATE: {  \n        IDLE: 0,\n        DAMAGED: 1,\n        RECOVERY: 2\n        \n    },\n    ANIMATION: {\n        IDLE_FRAMES: 5,\n        DAMAGED: 1,\n        POST: 1, //post damage\n        WIDTH: 130,\n        HEIGHT: 150\n    },\n    BOUNCE_OFFSET: 10\n\n};\n\n\nexport default class SandbagTotem extends PhysicsObject{\n    constructor(dimensions){\n\n        super(dimensions,\n            {\n            height: CONSTANTS.HEIGHT,\n            width: CONSTANTS.WIDTH,\n            mass: CONSTANTS.MASS,\n            directionHorizontal: CONSTANTS.DEFAULT_DIRECTION.HORIZONTAL,\n            directionVertical: CONSTANTS.DEFAULT_DIRECTION.VERTICAL,\n            testColor: CONSTANTS.TEST_COLOR,\n            bounceOffset: CONSTANTS.BOUNCE_OFFSET,\n            defaultPosition:{x: dimensions.width/2,\n                y: 0\n            }\n        });\n        this.animationDirection =  CONSTANTS.DEFAULT_DIRECTION.HORIZONTAL\n        //this.hp = CONSTANTS.DEFAULT_HP;\n        this.hp = CONSTANTS.DEFAULT_HP;\n        this.animations = this.importSpriteSheets(); \n        this.activeFrameSet;\n        this.frame = 0;\n        this.gameFrame = 0;\n        this.gravity = .60\n    }\n\n\n    importSpriteSheets(){\n\n        let idleLeft = new Image(), idleRight = new Image(), damagedLeft = new Image(), damagedRight = new Image(), postDamageLeft = new Image(), postDamageRight = new Image();\n        const allAnimations = [idleLeft, idleRight, damagedLeft, damagedRight, postDamageLeft, postDamageRight]\n        const allPaths =[\n            './assets/image/mushroom/mushroom_idle_left.png',\n            './assets/image/mushroom/mushroom_idle_right.png',\n            './assets/image/mushroom/mushroom_damage_left.png',\n            './assets/image/mushroom/mushroom_damage_right.png',\n            './assets/image/mushroom/mushroom_post_damage_left.png',\n            './assets/image/mushroom/mushroom_post_damage_right.png'\n        ];    \n\n        for(let i = 0; i < allPaths.length; i++) allAnimations[i].src = allPaths[i]\n        \n        return {idleLeft, idleRight, damagedLeft, damagedRight, postDamageLeft, postDamageRight}\n    }\n\n    frameChoice(){\n\n        if (this.state === CONSTANTS.STATE.IDLE){\n             if (this.animationDirection === 1) this.activeFrameSet = this.animations.idleLeft;\n             else if (this.animationDirection === -1) this.activeFrameSet = this.animations.idleRight;\n\n        }else if (this.state === CONSTANTS.STATE.DAMAGED){\n            if (this.animationDirection === 1) this.activeFrameSet = this.animations.damagedLeft;\n            else if (this.animationDirection === -1) this.activeFrameSet = this.animations.damagedRight;\n\n        }else if (this.state === CONSTANTS.STATE.RECOVERY){\n            if (this.animationDirection === 1) this.activeFrameSet = this.animations.postDamageLeft;\n            else if (this.animationDirection === -1) this.activeFrameSet = this.animations.postDamageRight;\n        }\n    }\n    \n    //logic for chosing which frame of animation to render.\n\n    frameSetAnimation(){ \n        if (this.state === 0){\n            if (this.gameFrame % 8 === 0){\n                if (this.frame < 4) this.frame++;\n                else this.frame = 0;\n            }\n            this.gameFrame ++;\n\n        }else if (this.state === 1){ //This logic needs to be tightened, should show damaged 1, then transition if no damage is done\n            this.frame = 0;\n            if (this.vel.y === 0 && this.vel.x < .3){\n                this.state = 0;\n            }\n\n            this.gameFrame ++\n        }\n        //}else if (this.state === 2){\n        //    this.frame = 0\n        //    if (this.gameFrame % 4 === 0){\n        //        this.state = 0;\n        //    }\n        //}\n\n    }\n       \n    inCollision(playerChar){\n\n\n        this.pos.x2 = this.pos.x + this.width;\n        this.pos.y2 = this.pos.y + this.height;\n        let lightAttackAOE = playerChar.lightAttack.areaOfEffect;\n\n\n        if((playerChar.state === 0 || playerChar.state === 1) && ((playerChar.pos.x2 >= this.pos.x && playerChar.pos.x2 <= this.pos.x2)\n            || (playerChar.pos.x <= this.pos.x2 && playerChar.pos.x >= this.pos.x) )&& \n            ((playerChar.pos.y2 >= this.pos.y && playerChar.pos.y2 <= this.pos.y2)\n            || (playerChar.pos.y <= this.pos.y2 && playerChar.pos.y >= this.pos.y))){\n                return true;\n\n        }else if((playerChar.state === 3 || playerChar.state === 4) && \n            ((lightAttackAOE.right >= this.pos.x && lightAttackAOE.right <= this.pos.x2)||\n             (lightAttackAOE.left <= this.pos.x2 && lightAttackAOE.right >= this.pos.x) )&& \n            ((lightAttackAOE.down >= this.pos.y && lightAttackAOE.down <= this.pos.y2)||\n            (lightAttackAOE.up <= this.pos.y2 && lightAttackAOE.up >= this.pos.y))){\n        return true\n    }\n        return false\n    }\n\n    convertMomentum(playerChar){\n        let transferedVelocityY = 0, transferedVelocityX = 0\n        this.direction.horizontal = playerChar.direction.horizontal\n        //If the player is walking, or in jump, decriment their velocity\n        if (playerChar.state === 1 || playerChar.state === 2){\n            transferedVelocityX = playerChar.vel.x * playerChar.direction.horizontal/this.mass;\n            transferedVelocityY = playerChar.vel.y * playerChar.direction.vertical/this.mass;\n            playerChar.vel.x -= transferedVelocityX;\n            playerChar.vel.y -= transferedVelocityY;\n\n\n            //else if this is an attack, then we do not decriment player velocity\n\n        }else if(playerChar.state === 3 || playerChar.state === 4){\n            let activeAttack;\n\n            this.state = CONSTANTS.STATE.DAMAGED; \n            if (playerChar.state === 3) activeAttack = playerChar.lightAttack;\n            else activeAttack = playerChar.chargeAttack;\n            //incriment hp\n            this.hp += activeAttack.damage;\n            this.direction.horizontal = playerChar.direction.horizontal;\n\n             \n            this.vel.x += activeAttack.velocityInput.x/this.mass * this.hp;\n\n            this.vel.y -= activeAttack.velocityInput.y/this.mass * this.hp;\n            //transferedVelocityX *= playerChar.direction.horizontal/this.mass * this.hp;\n      \n        }\n      \n    }\n\n        \n    draw(ctx){\n\n        this.frameChoice();\n        \n        ctx.drawImage(\n            this.activeFrameSet,\n             this.frame * this.width,\n             0,\n             this.width,\n             this.height,\n            this.pos.x,\n            this.pos.y,\n            this.width,\n            this.height\n            )\n        this.frameSetAnimation();\n    }\n\n\n    applyDrag(){\n\n        if(this.vel.y <= 0 && this.vel.x > 0){\n            this.vel.x -= this.drag;\n        }\n    }\n    \n    faceCharacter(playerChar){\n        if (playerChar.pos.x  < this.pos.x) this.animationDirection = 1;\n        else this.animationDirection = -1;\n\n    }\n\n    moveHorizontal(){\n        this.pos.x += this.vel.x * this.direction.horizontal\n    }\n\n  \n \n\n    update(){\n        this.applyDrag()\n        this.moveHorizontal();\n        this.moveVertical();\n        //this.changeAnimationState();\n    }\n\n\n    launchSandbag(){\n\n    }\n    \n    \n    reset(dimensions){\n        this.pos.x = 800;\n        this.pos.y = 0;\n        \n        \n        this.hp = CONSTANTS.DEFAULT_HP;\n    }\n    \n        \n     \n}\n","\n\n\nexport default class Background{\n    constructor(dimensions){\n        this.dimensions = dimensions;\n        this.dynamicWidth = this.dimensions.width\n        this.background = this.importBackground();\n    }\n\n\n    importBackground(){\n\n        let background1 = new Image(), background2 = new Image();\n      \n        //let attackLeft = new Image(), attackRight = new Image()\n\n        const allAnimations = [background1, background2]\n        const allPaths =[\n            './assets/image/background/field_1.jpg', './assets/image/background/field_1.jpg'];  \n\n        \n        for(let i = 0; i < allPaths.length; i++){\n            allAnimations[i].src = allPaths[i]\n        }\n        return {background1, background2}\n    }\n\n\n    draw(ctx){\n\n        ctx.drawImage(\n            this.background.background1,\n             0,\n             0,\n            )\n\n    }\n    update(){\n\n    }\n    //draw(ctx){\n//        //this should take care of colo\n//        ctx.fillStyle = DUMMYBG.DUMMY_COLOR;\n//        ctx.fillRect(0, 0, this.dynamicWidth, this.dimensions.height);\n//        ctx.fillStyle = 'black';\n//        ctx.fillRect(0, this.dimensions.height * (3/5), this.dynamicWidth, 4);\n//        ctx.fillStyle = 'black'\n//        ctx.fillRect(0, this.dimensions.height * (85/100), this.dynamicWidth, 4);\n\n\n//        //For bounce points\n\n//        ctx.fillStyle = 'blue'\n//        ctx.fillRect(0, 640, this.dynamicWidth, 4);\n    //}\n    \n    animate(ctx){\n        this.draw(ctx);\n\n    }\n\n    \n}\n\n","export default class Counter{\n\n    constructor(dimensions){\n        this.dimensions = dimensions;\n        this.distanceTraveled = -443;\n        this.maxHeight = 0;\n        this.sandbagPrevPos = {x:0, y:0}\n        this.sessionHighScore ={\n                                maxHeight: 0,\n                                maxDistanceTraveled: 0\n                                \n                                }\n        this.recordUpdated = false;\n        \n    }\n    \n    reset(){\n        this.maxHeight = 0;\n        this.distanceTraveled = -445;\n        this.recordUpdated = false\n    }\n\n    updateDistanceTraveled(sandbag){\n            if (sandbag.pos.x != this.sandbagPrevPos.x || sandbag.pos.y != this.sandbagPrevPos.y){\n                this.distanceTraveled += Math.sqrt((sandbag.vel.x) ** 2 + (sandbag.vel.y) **2);\n                }\n        \n    }\n\n    forceScoreZero(time){\n        if(time === 60){\n            this.distanceTraveled = 0;\n        }\n    }\n\n    updateMaxHeightYeeted(sandbagPosY){\n        this.maxHeight = Math.max(this.maxHeight, this.dimensions.floorPlane - sandbagPosY)\n    }\n    \n    updatePreviousPos(sandbag){\n        if(sandbag.pos.x != this.sandbagPrevPos.x || sandbag.pos.y != this.sandbagPrevPos.y){\n            this.sandbagPrevPos.x = sandbag.pos.x;\n            this.sandbagPrevPos.y = sandbag.pos.y;\n        }\n    }\n    \n    updateEndgame(){\n        if (!this.recordUpdated){\n\n            this.sessionHighScore.maxHeight = Math.max(this.sessionHighScore.maxHeight, this.maxHeight);\n            this.sessionHighScore.maxDistanceTraveled = Math.max(this.sessionHighScore.maxDistanceTraveled, this.distanceTraveled);\n            this.recordUpdated = true;\n        }\n    }\n    drawEndgame(ctx){ \n          \n        ctx.fillText(`Times up!`, this.dimensions.width/2 - 75 , this.dimensions.height/3);\n\n        ctx.fillText(`Your highest distance score: ${Math.floor(this.sessionHighScore.maxDistanceTraveled)} Meters`, this.dimensions.width/3 , this.dimensions.height/3 + 35)\n        ctx.fillText(`Your highest height score: ${Math.floor(this.sessionHighScore.maxHeight)} Meters`, this.dimensions.width/3 , this.dimensions.height/3 + 70)\n    }\n\n    animateEndgame(ctx){\n        this.updateEndgame()\n        this.drawEndgame(ctx)\n        \n    }\n\n    draw(ctx){\n        ctx.font = \"30px Calibri\"\n        ctx.fillText(`Total distance: ${Math.floor(this.distanceTraveled)} Meters`, 30, 50)\n        ctx.fillText(`Max Height: ${Math.floor(this.maxHeight)} Meters`, 30, 85)\n    }\n    \n    update(sandbag){\n        this.updatePreviousPos(sandbag)\n    }\n    animate(ctx){\n        this.draw(ctx)\n    }\n}","export default class Timer{\n\n    constructor(dimensions){\n        this.count = 60;\n      }\n\n    decrimentTimer(){\n      setInterval(()=>{\n        if (this.count > 0)this.count --;\n        else{\n          this.count = 0;\n          return true;\n        }\n      },1000)\n      \n    }\n\n    checkGameOver(){\n      if (this.count <= 0) return true;\n      else return false;\n    }\n    reset(){\n        this.count = 60;\n    }\n    draw(ctx){\n      ctx.font = \"30px Calibri\"\n      if (this.count > 0) ctx.fillText(`Time left: ${this.count}`, 30, 120)\n      else ctx.fillText(`Time left: GAME OVER`, 30, 120)\n    }\n\n\n\n    update(){\n    }\n    animate(ctx){\n      this.update()\n      this.draw(ctx)\n    }\n  }","import SandbagTotem from \"./sandbag\";\nconst CONSTANTS = {\n            FRAME_SIZE: {WIDTH: 200,\n                        HEIGHT: 214\n                        }\n            }\n\nexport default class OffScreenSandbag{\n    constructor(){\n            this.activeFrameSet;\n            this.width= CONSTANTS.FRAME_SIZE.WIDTH;\n            this.height = CONSTANTS.FRAME_SIZE.HEIGHT;\n            this.pos= {\n                x: 0,\n                y:0,\n            },\n            this.frameSet = this.importSpriteSheets()\n        \n    }\n\n    importSpriteSheets(){\n\n        let mushroomLeft = new Image(), mushroomRight = new Image();\n\n        const allAnimations = [mushroomLeft, mushroomRight]\n        const allPaths =[\n            './assets/image/offscreen_mushroom/mushroom_left.png',\n            './assets/image/offscreen_mushroom/mushroom_right.png'\n        ];\n        \n        for(let i = 0; i < allPaths.length; i++){\n            allAnimations[i].src = allPaths[i]\n        }\n        return {mushroomLeft, mushroomRight}\n    }\n    //check if the sandbag is offscreen\n    sandbagOffScreen(sandbag){\n\n        if (sandbag.pos.y2 <= 0){\n            this.pos.x = sandbag.pos.x;\n            this.pos.y = 0;\n            return true;\n        }\n        else return false;\n    }\n\n    frameChoice(sandbag){\n        if (sandbag.direction.horizontal === -1) this.activeFrameSet = this.frameSet.mushroomLeft;\n        else this.activeFrameSet = this.frameSet.mushroomRight;\n    }\n    \n    //logic for chosing which frame of animation to render.\n\n    draw(ctx, sandbag){\n\n        this.frameChoice(sandbag);\n        ctx.drawImage(this.activeFrameSet, 0, 0, this.width, this.height, \n                    this.pos.x, this.pos.y, this.width, this.height);\n\n    }\n\n\n    update(sandbag){\n\n    }\n\n    animate(ctx, sandbag){\n        \n        if (this.sandbagOffScreen(sandbag)){\n            this.draw(ctx, sandbag);\n        }\n    }\n}","import Game from \"./scripts/game\";\n\n\nconst observer = new IntersectionObserver((entries)=>{\n    entries.forEach((entry) =>{\n\n        if(entry.isIntersecting) entry.target.classList.add('show');\n        \n        else entry.target.classList.remove('show')\n\n    });\n});\n\n\nconst hiddenElements = document.querySelectorAll('.hidden');\nhiddenElements.forEach((el) => observer.observe(el));\n\nconst toggleMusic = document.getElementById(\"mute-button\"), restartButton = document.getElementById(\"restart-button\"), canvas = document.getElementById(\"sandbag-game\");\nconst backgroundMusic = document.createElement(\"audio\");\nbackgroundMusic.src = \"./assets/sound/galdin_quay.mp3\";\nbackgroundMusic.volume = 0.5;\nlet musicStarted = false;\n//backgroundMusic.play();\n\n\nlet game = new Game(canvas);\ngame.play();\n\nwindow.addEventListener('keydown', (event) => game.convertKeydown(event.key))\nwindow.addEventListener('keyup', (event) => game.convertKeyRelease(event.key))\n\nwindow.addEventListener('click', () => game.convertLeftClick());\n\ntoggleMusic.addEventListener(\"click\", ()=>{\n    if(!musicStarted){\n        backgroundMusic.play();\n        musicStarted = true;\n    }else if (musicStarted && backgroundMusic.volume !== 0){\n        backgroundMusic.volume = 0;\n    }else {\n        backgroundMusic.volume = 0.5;\n    } \n})\n\nrestartButton.addEventListener(\"click\", ()=>{\n    game.reset();\n})","import Caelum from \"./caelum\";\nimport SandbagTotem from \"./sandbag\";\nimport Background from \"./background\";\nimport Counter from \"./counter\"\nimport Timer from \"./timer\"\nimport OffScreenSandbag from \"./offscreen\";\n\nexport default class Game{\n\n    constructor(canvas){\n        this.ctx = canvas.getContext(\"2d\");\n        this.mapDimensions = {\n                        width: canvas.width, \n                        height: canvas.height,\n                        floorPlane: 586\n                        };\n        \n        this.player = new Caelum(this.mapDimensions);\n        this.sandbag= new SandbagTotem(this.mapDimensions);\n        this.sandbagOffScreen = new OffScreenSandbag();\n        this.background = new Background(this.mapDimensions);\n        this.scoreCounter = new Counter(this.mapDimensions);\n        this.timer = new Timer(this.dimensions);\n        this.checkGameOver = false;\n        this.activeGame;\n    }\n\n\n    //Main gameplay loop\n\n    animate(){\n\n        this.checkGameOver = this.timer.checkGameOver()\n        this.ctx.clearRect(0, 0, this.mapDimensions.width, this.mapDimensions.height)\n        this.background.animate(this.ctx);\n        this.sandbagOffScreen.animate(this.ctx, this.sandbag);\n        this.scoreCounter.updateDistanceTraveled(this.sandbag);\n        this.scoreCounter.updateMaxHeightYeeted(this.sandbag.pos.y);\n        this.scoreCounter.updatePreviousPos(this.sandbag);\n        this.scoreCounter.animate(this.ctx, this.sandbag);\n        this.timer.animate(this.ctx)\n        this.sandbag.faceCharacter(this.player);\n        this.sandbag.animate(this.ctx);\n        this.player.animate(this.ctx);\n        //this.specialEffects.animate(this.ctx, this.player.state); //should animate left or right spear effects\n        //this.specialEffect.animate(this.ctx, this.sandbag.state)//should animate damaged animation\n        if(this.sandbag.inCollision(this.player)){\n            this.sandbag.convertMomentum(this.player)\n        }\n        if (this.player.outOfBounds()) this.player.bounce();\n        \n        if (this.sandbag.outOfBounds()) this.sandbag.bounce();\n        \n        if (this.timer.checkGameOver()) this.scoreCounter.animateEndgame(this.ctx);\n        \n\n\n        if (this.activeGame) {\n            requestAnimationFrame(this.animate.bind(this));\n          }        \n    }\n\n\n    restart(){\n        this.player.reset();\n        this.sandbag.reset;\n    }\n\n    play(){\n        this.activeGame = true;\n        this.animate();\n        this.timer.decrimentTimer()\n       \n    }\n    //resets bag pos, resets char pos\n    reset(){\n        this.player.reset(this.mapDimensions);\n        this.sandbag.reset(this.mapDimensions);\n        this.timer.reset();\n        this.scoreCounter.reset();\n    }\n\n\n    convertKeydown(userInput){\n        if(userInput === \" \"){\n            this.player.doChargeAttack();\n        }else{\n            this.beginMovement(userInput);\n        }\n    }\n\n    beginMovement(userInput){\n        if(!this.player.inBounce){\n            this.player.move(userInput)\n\n        }\n    }\n\n    convertKeyRelease(userInput){\n        if(userInput === \" \"){\n            this.player.releaseChargeAttack();\n        }else{\n            this.endMovement(userInput);\n        }\n    }\n\n    endMovement(userInput){ \n    \n        this.player.endHorizontalMovement(userInput)\n    }\n\n    convertLeftClick(){\n        //Eventually i will want mute, pause, and choice buttons, this will require refactoring\n        this.player.doLightAttack();\n    }\n\n\n  \n}"],"names":["PhysicsObject","constructor","dimensions","options","this","height","width","mass","direction","horizontal","directionHorizontal","vertical","directionVertical","pos","x","defaultPosition","y","x2","y2","defaultY","prev","bounceOffset","state","drag","vel","accel","boundaries","setBoundaries","leftBound","rightBound","floorBound","ceilingBound","floorPlane","outOfBounds","bounce","moveVertical","gravity","Player","setStateIdle","animate","ctx","update","draw","CONSTANTS","X","Y","super","activeFrameSet","frame","gameFrame","lightAttack","attacking","damage","velocityInput","animation","areaOfEffect","left","right","up","down","chargeAttack","frameChoice","animations","idleLeft","idleRight","walkLeft","walkRight","jumpLeft","jumpRight","attackLeft","attackRight","frameSetAnimation","_drawAttackFrames","drawImage","increaseVelX","changeAnimationState","jump","doLightAttack","updateLightAttackAOE","preformLightAttack","attackFrames","setTimeout","moveHorizontal","endHorizontalMovement","doChargeAttack","releaseChargeAttack","move","wasd","reset","Caelum","importSpriteSheets","Image","allAnimations","allPaths","i","length","src","HEIGHT","WIDTH","MASS","DEFAULT_DIRECTION","HORIZONTAL","VERTICAL","DEFAULT_POS","DEFAULT_VEL","DEFAULT_HP","GRAVITY","STATE","IDLE","DAMAGED","RECOVERY","ANIMATION","IDLE_FRAMES","POST","BOUNCE_OFFSET","SandbagTotem","testColor","TEST_COLOR","animationDirection","hp","damagedLeft","damagedRight","postDamageLeft","postDamageRight","inCollision","playerChar","lightAttackAOE","convertMomentum","transferedVelocityY","transferedVelocityX","activeAttack","applyDrag","faceCharacter","launchSandbag","Background","dynamicWidth","background","importBackground","background1","background2","Counter","distanceTraveled","maxHeight","sandbagPrevPos","sessionHighScore","maxDistanceTraveled","recordUpdated","updateDistanceTraveled","sandbag","Math","sqrt","forceScoreZero","time","updateMaxHeightYeeted","sandbagPosY","max","updatePreviousPos","updateEndgame","drawEndgame","fillText","floor","animateEndgame","font","Timer","count","decrimentTimer","setInterval","checkGameOver","OffScreenSandbag","frameSet","mushroomLeft","mushroomRight","sandbagOffScreen","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","target","classList","add","remove","document","querySelectorAll","el","observe","toggleMusic","getElementById","restartButton","canvas","backgroundMusic","createElement","volume","musicStarted","game","getContext","mapDimensions","player","scoreCounter","timer","activeGame","clearRect","requestAnimationFrame","bind","restart","play","convertKeydown","userInput","beginMovement","inBounce","convertKeyRelease","endMovement","convertLeftClick","window","addEventListener","event","key"],"sourceRoot":""}